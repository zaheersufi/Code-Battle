{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zahee\\\\Desktop\\\\Projects\\\\CodeBattle\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Snake from \"./Components/Snake\";\nimport Food from \"./Components/Food\";\nimport Button from \"./Components/Button\";\nimport Menu from \"./Components/Menu\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomFood = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\nconst initialState = {\n  food: getRandomFood(),\n  direction: \"RIGHT\",\n  speed: 100,\n  route: \"menu\",\n  snakeDots: [[0, 0], [0, 2]]\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.onKeyDown = e => {\n      e.preventDefault();\n      e = e || window.event;\n      switch (e.keyCode) {\n        case 37:\n          this.setState({\n            direction: \"LEFT\"\n          });\n          break;\n        case 38:\n          this.setState({\n            direction: \"UP\"\n          });\n          break;\n        case 39:\n          this.setState({\n            direction: \"RIGHT\"\n          });\n          break;\n        case 40:\n          this.setState({\n            direction: \"DOWN\"\n          });\n          break;\n      }\n    };\n    this.moveSnake = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      if (this.state.route === \"game\") {\n        switch (this.state.direction) {\n          case \"RIGHT\":\n            head = [head[0] + 2, head[1]];\n            break;\n          case \"LEFT\":\n            head = [head[0] - 2, head[1]];\n            break;\n          case \"DOWN\":\n            head = [head[0], head[1] + 2];\n            break;\n          case \"UP\":\n            head = [head[0], head[1] - 2];\n            break;\n        }\n        dots.push(head);\n        dots.shift();\n        this.setState({\n          snakeDots: dots\n        });\n      }\n    };\n    this.onRouteChange = () => {\n      this.setState({\n        route: \"game\"\n      });\n    };\n    this.onDown = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      head = [head[0], head[1] + 2];\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        direction: \"DOWN\",\n        snakeDots: dots\n      });\n    };\n    this.onUp = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      head = [head[0], head[1] - 2];\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        direction: \"UP\",\n        snakeDots: dots\n      });\n    };\n    this.onRight = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      head = [head[0] + 2, head[1]];\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        direction: \"RIGHT\",\n        snakeDots: dots\n      });\n    };\n    this.onLeft = () => {\n      let dots = [...this.state.snakeDots];\n      let head = dots[dots.length - 1];\n      head = [head[0] - 2, head[1]];\n      dots.push(head);\n      dots.shift();\n      this.setState({\n        direction: \"LEFT\",\n        snakeDots: dots\n      });\n    };\n    this.state = initialState;\n  }\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n  componentDidUpdate() {\n    this.onSnakeOutOfBounds();\n    this.onSnakeCollapsed();\n    this.onSnakeEats();\n  }\n  onSnakeOutOfBounds() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (this.state.route === \"game\") {\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n        this.gameOver();\n      }\n    }\n  }\n  onSnakeCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.gameOver();\n      }\n    });\n  }\n  onSnakeEats() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomFood()\n      });\n      this.increaseSnake();\n      this.increaseSpeed();\n    }\n  }\n  increaseSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 20\n      });\n    }\n  }\n  gameOver() {\n    alert(`GAME OVER, your score is ${this.state.snakeDots.length - 2}`);\n    this.setState(initialState);\n  }\n  render() {\n    const {\n      route,\n      snakeDots,\n      food\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: route === \"menu\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Menu, {\n          onRouteChange: this.onRouteChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-area\",\n          children: [/*#__PURE__*/_jsxDEV(Snake, {\n            snakeDots: snakeDots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Food, {\n            dot: food\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Snake","Food","Button","Menu","jsxDEV","_jsxDEV","getRandomFood","min","max","x","Math","floor","random","y","initialState","food","direction","speed","route","snakeDots","App","constructor","onKeyDown","e","preventDefault","window","event","keyCode","setState","moveSnake","dots","state","head","length","push","shift","onRouteChange","onDown","onUp","onRight","onLeft","componentDidMount","setInterval","document","onkeydown","componentDidUpdate","onSnakeOutOfBounds","onSnakeCollapsed","onSnakeEats","gameOver","snake","pop","forEach","dot","increaseSnake","increaseSpeed","newSnake","unshift","alert","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["C:/Users/zahee/Desktop/Projects/CodeBattle/my-app/src/App.js"],"sourcesContent":[" import React, { Component } from \"react\"; \nimport Snake from \"./Components/Snake\"; \nimport Food from \"./Components/Food\"; \nimport Button from \"./Components/Button\"; \nimport Menu from \"./Components/Menu\"; \nimport \"./App.css\"; \nconst getRandomFood = () => { \n    let min = 1; \n    let max = 98; \n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2; \n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2; \n    return [x, y]; \n}; \n  \nconst initialState = { \n    food: getRandomFood(), \n    direction: \"RIGHT\", \n    speed: 100, \n    route: \"menu\",\n    snakeDots: [ \n        [0, 0], \n        [0, 2], \n    ], \n}; \n  \nclass App extends Component { \n    constructor() { \n        super(); \n        this.state = initialState; \n    } \n  \n    componentDidMount() { \n        setInterval(this.moveSnake, this.state.speed); \n        document.onkeydown = this.onKeyDown; \n    } \n  \n    componentDidUpdate() { \n        this.onSnakeOutOfBounds(); \n        this.onSnakeCollapsed(); \n        this.onSnakeEats(); \n    } \n  \n    onKeyDown = (e) => { \n        e.preventDefault(); \n        e = e || window.event; \n        switch (e.keyCode) { \n            case 37: \n                this.setState({ direction: \"LEFT\" }); \n                break; \n            case 38: \n                this.setState({ direction: \"UP\" }); \n                break; \n            case 39: \n                this.setState({ direction: \"RIGHT\" }); \n                break; \n            case 40: \n                this.setState({ direction: \"DOWN\" }); \n                break; \n        } \n    }; \n  \n    moveSnake = () => { \n        let dots = [...this.state.snakeDots]; \n        let head = dots[dots.length - 1]; \n        if (this.state.route === \"game\") { \n            switch (this.state.direction) { \n                case \"RIGHT\": \n                    head = [head[0] + 2, head[1]]; \n                    break; \n                case \"LEFT\": \n                    head = [head[0] - 2, head[1]]; \n                    break; \n                case \"DOWN\": \n                    head = [head[0], head[1] + 2]; \n                    break; \n                case \"UP\": \n                    head = [head[0], head[1] - 2]; \n                    break;\n            } \n            dots.push(head); \n            dots.shift(); \n            this.setState({ \n                snakeDots: dots, \n            }); \n        } \n    }; \n  \n    onSnakeOutOfBounds() { \n        let head = this.state.snakeDots[this.state.snakeDots.length - 1]; \n        if (this.state.route === \"game\") { \n            if ( \n                head[0] >= 100 || \n                head[1] >= 100 || \n                head[0] < 0 || \n                head[1] < 0 \n            ) { \n                this.gameOver(); \n            } \n        } \n    } \n  \n    onSnakeCollapsed() { \n        let snake = [...this.state.snakeDots]; \n        let head = snake[snake.length - 1]; \n        snake.pop(); \n        snake.forEach((dot) => { \n            if (head[0] == dot[0] && head[1] == dot[1]) { \n                this.gameOver(); \n            } \n        }); \n    } \n  \n    onSnakeEats() { \n        let head = this.state.snakeDots[this.state.snakeDots.length - 1]; \n        let food = this.state.food; \n        if (head[0] == food[0] && head[1] == food[1]) { \n            this.setState({ \n                food: getRandomFood(), \n            }); \n            this.increaseSnake(); \n            this.increaseSpeed(); \n        } \n    } \n  \n    increaseSnake() { \n        let newSnake = [...this.state.snakeDots]; \n        newSnake.unshift([]); \n        this.setState({ \n            snakeDots: newSnake, \n        }); \n    } \n  \n    increaseSpeed() { \n        if (this.state.speed > 10) { \n            this.setState({ \n                speed: this.state.speed - 20, \n            }); \n        } \n    } \n  \n    onRouteChange = () => { \n        this.setState({ \n            route: \"game\", \n        }); \n    }; \n  \n    gameOver() { \n        alert(`GAME OVER, your score is ${this.state.snakeDots.length - 2}`); \n        this.setState(initialState); \n    } \n  \n    onDown = () => { \n        let dots = [...this.state.snakeDots]; \n        let head = dots[dots.length - 1]; \n  \n        head = [head[0], head[1] + 2]; \n        dots.push(head); \n        dots.shift(); \n        this.setState({ \n            direction: \"DOWN\", \n            snakeDots: dots, \n        }); \n    }; \n  \n    onUp = () => { \n        let dots = [...this.state.snakeDots]; \n        let head = dots[dots.length - 1]; \n  \n        head = [head[0], head[1] - 2]; \n        dots.push(head); \n        dots.shift(); \n        this.setState({ \n            direction: \"UP\", \n            snakeDots: dots, \n        }); \n    }; \n  \n    onRight = () => { \n        let dots = [...this.state.snakeDots]; \n        let head = dots[dots.length - 1]; \n  \n        head = [head[0] + 2, head[1]]; \n        dots.push(head); \n        dots.shift(); \n        this.setState({ \n            direction: \"RIGHT\", \n            snakeDots: dots, \n        }); \n    }; \n  \n    onLeft = () => { \n        let dots = [...this.state.snakeDots]; \n        let head = dots[dots.length - 1]; \n  \n        head = [head[0] - 2, head[1]]; \n        dots.push(head); \n        dots.shift(); \n        this.setState({ \n            direction: \"LEFT\", \n            snakeDots: dots, \n        }); \n    }; \n  \n    render() { \n        const { route, snakeDots, food } = this.state; \n        return ( \n            <div> \n                {route === \"menu\" ? ( \n                    <div> \n                        <Menu onRouteChange={this.onRouteChange} /> \n                    </div> \n                ) : ( \n                    <div> \n                        <div className=\"game-area\"> \n                            <Snake snakeDots={snakeDots} /> \n                            <Food dot={food} /> \n                        </div> \n                    </div> \n                )} \n            </div> \n        ); \n    } \n} \n  \nexport default App; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}